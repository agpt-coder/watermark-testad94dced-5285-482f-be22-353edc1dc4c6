// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  email              String              @unique
  hashedPassword     String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  watermarkSettings  WatermarkSetting[]
  uploads            Upload[]
  watermarkTemplates WatermarkTemplate[]
  feedbacks          Feedback[]
}

model WatermarkSetting {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  opacity       Float
  position      String
  scale         Float
  rotation      Float
  font          String? // Used if watermarkType is TEXT
  size          String? // Used if watermarkType is IMAGE
  watermarkType WatermarkType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  User           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  WatermarkedPDF WatermarkedPDF?
}

model Upload {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  fileName    String
  fileType    FileType
  fileSize    Int
  path        String
  createdAt   DateTime @default(now())
  watermarkId String?

  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  WatermarkedPDFs WatermarkedPDF[]
}

model WatermarkedPDF {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  originalUploadId   String
  watermarkSettingId String   @unique
  fileName           String
  fileSize           Int
  path               String
  createdAt          DateTime @default(now())

  OriginalUpload   Upload           @relation(fields: [originalUploadId], references: [id], onDelete: Cascade)
  WatermarkSetting WatermarkSetting @relation(fields: [watermarkSettingId], references: [id], onDelete: Cascade)
}

model WatermarkTemplate {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  templateName String
  content      String? // Used if templateType is TEXT
  imagePath    String? // Used if templateType is IMAGE
  templateType WatermarkType
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String?
  content   String
  createdAt DateTime @default(now())

  User User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model LegalResource {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  content   String
  link      String?
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum WatermarkType {
  TEXT
  IMAGE
}

enum FileType {
  PDF
  JPEG
  PNG
  SVG
}

